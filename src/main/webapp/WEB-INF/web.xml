<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>

  <!-- 1、配置启动 Spring 容器:
主要配置和业务逻辑有关的，比如数据源，事务控制等-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <!--ContextLoaderListener 监听器作用是启动 Web 容器时，自动装配 ApplicationContext 的配置信息
       ,它实现了 ServletContextListener 接口，在 web.xml 配置该监听器，启动容器时，会默认执行它实现的方法-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- 2、SpringMVC 的前端控制器，拦截所有请求
         1. springmvc 中央控制器
         2. 负责处理所有的应用请求
         3. 如果没有指定 springmvc 的配置文件，默认为 servlet-name 的值-servlet.xml
         4. 如果指定了 springmvc 的配置文件，则以指定的为准-->
  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

<!--  3、字符编码过滤器，一定要放在所有过滤器的最前面
      源码解读
      (1) 如 果 forceRequestEncoding 设 置 为 true, 执 行
          request.setCharacterEncoding(encoding)
      (2) 如 果 forceResponseEncoding 设 置 为 true, 执 行
          response.setCharacterEncoding(encoding);-->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- 4、配置 HiddenHttpMethodFilter, 使用 Rest 风格的 URI，可以把页面发过来的 post请求转为指定的 delete 或者 put 请求-->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

</web-app>
